# # import sys, os
# # import warnings

# # warnings.filterwarnings("ignore", category=DeprecationWarning)
# # sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

import pytest
from fastapi.testclient import TestClient
from unittest.mock import patch, MagicMock
from main import app
from api.v1.models.user import User
from api.v1.models.org import Organization
from api.v1.services.org import OrganizationService
from api.v1.services.user import user_service
from uuid_extensions import uuid7
from api.db.database import get_db
from fastapi import status
from datetime import datetime, timezone


client = TestClient(app)
ADD_USER_ENDPOINT = '/api/v1/organization/1/add-user'
LOGIN_ENDPOINT = 'api/v1/auth/login'

@pytest.fixture
def mock_db_session():
    """Fixture to create a mock database session. api.v1.services.user.get_db"""

    with patch("api.db.database.get_db", autospec=True) as mock_get_db:
        mock_db = MagicMock()
        # mock_get_db.return_value.__enter__.return_value = mock_db
        app.dependency_overrides[get_db] = lambda: mock_db
        yield mock_db
    app.dependency_overrides = {}


@pytest.fixture
def mock_user_service():
    """Fixture to create a mock user service."""

    with patch("api.v1.services.user.user_service", autospec=True) as mock_service:
        yield mock_service


def create_mock_user(mock_user_service, mock_db_session):
    """Create a mock user in the mock database session."""
    mock_user = User(
        id=str(uuid7()),
        username="testuser",
        email="testuser@gmail.com",
        password=user_service.hash_password("Testpassword"),
        first_name='Test',
        last_name='User',
        is_active=True,
        is_super_admin=False,
        created_at=datetime.now(timezone.utc),
        updated_at=datetime.now(timezone.utc)
    )
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_user

    # mock_db_session.return_value.__enter__.return_value = mock_user
    # mock_user_service.hash_password.return_value = "hashed_password"
    # mock_db_session.add.return_value = None
    # mock_db_session.commit.return_value = None
    # mock_db_session.refresh.return_value = None

    return mock_user

def create_organisation_user(mock_organisation, mock_db_session):
    mock_org = Organization(
        id = 1,
        name="Test Org",
        description="For Testing Purposes",
    )
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_org
    return mock_org

@pytest.mark.usefixtures("mock_db_session", "mock_user_service")
def test_add_user_to_organization(mock_user_service, mock_db_session):
    """Test for adding a user to an organization."""

    # mock_org=create_mock_organization(mock_db_session)
    mock_user = create_mock_user(mock_user_service, mock_db_session)
    mock_access_token = user_service.create_access_token(user_id=str(uuid7()))

    # Mock the login response
    response = client.post(LOGIN_ENDPOINT, data={
        "username": "testuser",
        "password": "Testpassword"
    })
    response_data = response.json()
    print("--------------------------------------------------------------------------")
    print(response_data)
    assert response_data.get("status_code") == status.HTTP_200_OK
    access_token = response_data.get('data').get('access_token')

    # Add user to organization
    response = client.post(ADD_USER_ENDPOINT.format(org_id=1), headers={'Authorization': f'Bearer {mock_access_token}'})
    assert response.status_code == status.HTTP_200_OK
    assert response.json().get('status') == 'success'


# @pytest.mark.usefixtures("mock_db_session", "mock_organization_service")
# def test_unauthorized_add_user_to_organization(mock_organization_service, mock_db_session):
#     """Test for unauthorized attempt to add a user to an organization."""

#     response = client.post(ADD_USER_ENDPOINT.format(org_id=mock_or))
#     assert response.status_code == status.HTTP_401_UNAUTHORIZED
