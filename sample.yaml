openapi: 3.0.0
info:
  title: Comprehensive SaaS Platform API
  version: 2.0.0
  description: API for a full-featured SaaS platform including authentication, payments, user management, and more.

paths:
  # Authentication
  /auth/signup:
    post:
      summary: Create a new user account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: Successful signup
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/login:
    post:
      summary: Log in a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/social-login/{provider}:
    post:
      summary: Authenticate user via social login
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
            enum: [google, facebook, twitter]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
      responses:
        '200':
          description: Successful social login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /auth/magic-link:
    post:
      summary: Send a magic link for passwordless authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MagicLinkRequest'
      responses:
        '200':
          description: Magic link sent successfully

  /auth/reset-password:
    post:
      summary: Reset user password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully

  # User Management
  /users:
    get:
      summary: List users (for admin)
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
    post:
      summary: Create a new user (for admin)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{userId}:
    get:
      summary: Get user details
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    put:
      summary: Update user details
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    delete:
      summary: Delete a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully

  /users/{userId}/export:
    get:
      summary: Export user data (GDPR compliance)
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User data export
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserExportResponse'

  # Organization Management
  /organizations:
    get:
      summary: List organizations
      responses:
        '200':
          description: A list of organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResponse'
    post:
      summary: Create a new organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '200':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'

  /organizations/{orgId}:
    get:
      summary: Get organization details
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
    put:
      summary: Update organization details
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
    delete:
      summary: Delete an organization
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Organization deleted successfully

  # Payments
  /payments/stripe:
    post:
      summary: Process a Stripe payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StripePaymentRequest'
      responses:
        '200':
          description: Payment processed successfully

  /payments/flutterwave:
    post:
      summary: Process a Flutterwave payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlutterwavePaymentRequest'
      responses:
        '200':
          description: Payment processed successfully

  /payments/lemonsqueezy:
    post:
      summary: Process a LemonSqueezy payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LemonSqueezyPaymentRequest'
      responses:
        '200':
          description: Payment processed successfully

  # Messaging
  /messages/email:
    post:
      summary: Send an email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        '200':
          description: Email sent successfully

  /messages/templates:
    get:
      summary: List email templates
      responses:
        '200':
          description: A list of email templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateListResponse'
    post:
      summary: Create a new email template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailTemplateRequest'
      responses:
        '200':
          description: Email template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateResponse'

  /messages/templates/{templateId}:
    get:
      summary: Get email template details
      parameters:
        - in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateResponse'
    put:
      summary: Update email template
      parameters:
        - in: path
          name: templateId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailTemplateRequest'
      responses:
        '200':
          description: Email template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplateResponse'
    delete:
      summary: Delete an email template
      parameters:
        - in: path
          name: templateId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Email template deleted successfully

  # Settings
  /settings:
    get:
      summary: Get user settings
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
    put:
      summary: Update user settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettingsRequest'
      responses:
        '200':
          description: User settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'

  # Profile
  /profile:
    get:
      summary: Get user profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
    put:
      summary: Update user profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'

  # Content Pages
  /pages:
    get:
      summary: List content pages
      responses:
        '200':
          description: A list of content pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPageListResponse'
    post:
      summary: Create a new content page
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentPageRequest'
      responses:
        '200':
          description: Content page created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPageResponse'

  /pages/{pageId}:
    get:
      summary: Get content page details
      parameters:
        - in: path
          name: pageId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Content page details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPageResponse'
    put:
      summary: Update content page
      parameters:
        - in: path
          name: pageId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentPageRequest'
      responses:
        '200':
          description: Content page updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPageResponse'
    delete:
      summary: Delete a content page
      parameters:
        - in: path
          name: pageId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Content page deleted successfully

  # Contact Form
  /contact:
    post:
      summary: Submit a contact form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactFormRequest'
      responses:
        '200':
          description: Contact form submitted successfully

  # GDPR
  /gdpr/consent:
    post:
      summary: Record user consent for GDPR
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentRequest'
      responses:
        '200':
          description: Consent recorded successfully

  # Dashboard Data
  /dashboard:
    get:
      summary: Get dashboard data
      responses:
        '200':
          description: Dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardDataResponse'

  # Waitlist
  /waitlist:
    post:
      summary: Join the waitlist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitlistRequest'
      responses:
        '200':
          description: Successfully joined the waitlist

  # Invite System
  /invites:
    post:
      summary: Create an invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInviteRequest'
      responses:
        '200':
          description: Invite created successfully
    get:
      summary: List invites
      responses:
        '200':
          description: A list of invites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteListResponse'

  /invites/{inviteId}/accept:
    post:
      summary: Accept an invite
      parameters:
        - in: path
          name: inviteId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invite accepted successfully

  # User Associated Data
  /user-data:
    get:
      summary: List user associated data
      responses:
        '200':
          description: A list of user associated data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataListResponse'
    post:
      summary: Create new user associated data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDataRequest'
      responses:
        '200':
          description: User data created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResponse'

  /user-data/{dataId}:
    get:
      summary: Get single user data item
      parameters:
        - in: path
          name: dataId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User data item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResponse'
    put:
      summary: Update user data item
      parameters:
        - in: path
          name: dataId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDataRequest'
      responses:
        '200':
          description: User data item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataResponse'
    delete:
      summary: Delete user data item
      parameters:
        - in: path
          name: dataId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User data item deleted successfully

  # Search and Sort
  /search:
    get:
      summary: Search across various data types
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  # Analytics
  /analytics/chart:
    get:
      summary: Get chart data for analytics
      responses:
        '200':
          description: Chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartDataResponse'

  # Notifications
  /notifications:
    get:
      summary: List user notifications
      responses:
        '200':
          description: A list of notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListResponse'
    post:
      summary: Create a new notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotificationRequest'
      responses:
        '200':
          description: Notification created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'

  # Blog
  /blog:
    get:
      summary: List blog posts
      responses:
        '200':
          description: A list of blog posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostListResponse'
    post:
      summary: Create a new blog post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBlogPostRequest'
      responses:
        '200':
          description: Blog post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostResponse'

  /blog/{postId}:
    get:
      summary: Get blog post details
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Blog post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostResponse'
    put:
      summary: Update blog post
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBlogPostRequest'
      responses:
        '200':
          description: Blog post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostResponse'
    delete:
      summary: Delete a blog post
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Blog post deleted successfully

  # Language and Region
  /localization:
    get:
      summary: Get available languages and regions
      responses:
        '200':
          description: Available languages and regions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizationResponse'
    put:
      summary: Update user's language and region preferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocalizationRequest'
      responses:
        '200':
          description: Localization preferences updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizationResponse'

components:
  schemas:
    # Authentication
    SignUpRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    SocialLoginRequest:
      type: object
      properties:
        token:
          type: string
    MagicLinkRequest:
      type: object
      properties:
        email:
          type: string
    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
        newPassword:
          type: string
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    # User Management
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
    UserExportResponse:
      type: object
      properties:
        data:
          type: string

    # Organization Management
    CreateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        domain:
          type: string
    OrganizationResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        domain:
          type: string
    OrganizationListResponse:
      type: object
      properties:
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationResponse'

    # Payments
    StripePaymentRequest:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        source:
          type: string
    FlutterwavePaymentRequest:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        source:
          type: string
    LemonSqueezyPaymentRequest:
      type: object
      properties:
        amount:
          type: number
        currency:
          type: string
        source:
          type: string

    # Messaging
    EmailRequest:
      type: object
      properties:
        to:
          type: string
        subject:
          type: string
        body:
          type: string
    CreateEmailTemplateRequest:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        body:
          type: string
    UpdateEmailTemplateRequest:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        body:
          type: string
    EmailTemplateResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        subject:
          type: string
        body:
          type: string
    EmailTemplateListResponse:
      type: object
      properties:
        templates:
          type: array
          items:
            $ref: '#/components/schemas/EmailTemplateResponse'

    # Settings
    SettingsResponse:
      type: object
      properties:
        settings:
          type: object
          additionalProperties:
            type: string
    UpdateSettingsRequest:
      type: object
      properties:
        settings:
          type: object
          additionalProperties:
            type: string

    # Profile
    ProfileResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
    UpdateProfileRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string

    # Content Pages
    CreateContentPageRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    UpdateContentPageRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    ContentPageResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
    ContentPageListResponse:
      type: object
      properties:
        pages:
          type: array
          items:
            $ref: '#/components/schemas/ContentPageResponse'

    # Contact Form
    ContactFormRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        message:
          type: string

    # GDPR
    ConsentRequest:
      type: object
      properties:
        consent:
          type: string

    # Dashboard Data
    DashboardDataResponse:
      type: object
      properties:
        data:
          type: object

    # Waitlist
    WaitlistRequest:
      type: object
      properties:
        email:
          type: string

    # Invite System
    CreateInviteRequest:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
    InviteListResponse:
      type: object
      properties:
        invites:
          type: array
          items:
            $ref: '#/components/schemas/InviteResponse'
    InviteResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        role:
          type: string

    # User Associated Data
    CreateUserDataRequest:
      type: object
      properties:
        type:
          type: string
        data:
          type: object
    UpdateUserDataRequest:
      type: object
      properties:
        type:
          type: string
        data:
          type: object
    UserDataResponse:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        data:
          type: object
    UserDataListResponse:
      type: object
      properties:
        userData:
          type: array
          items:
            $ref: '#/components/schemas/UserDataResponse'

    # Search and Sort
    SearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object

    # Analytics
    ChartDataResponse:
      type: object
      properties:
        chartData:
          type: object

    # Notifications
    CreateNotificationRequest:
      type: object
      properties:
        title:
          type: string
        message:
          type: string
    NotificationResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        message:
          type: string
    NotificationListResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationResponse'

    # Blog
    CreateBlogPostRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    UpdateBlogPostRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    BlogPostResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
    BlogPostListResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/BlogPostResponse'

    # Language and Region
    LocalizationResponse:
      type: object
      properties:
        languages:
          type: array
          items:
            type: string
        regions:
          type: array
          items:
            type: string
    UpdateLocalizationRequest:
      type: object
      properties:
        language:
          type: string
        region:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  